 n761- IV,I, III,V, 
execuçÃO ESPERADA -podem ocorrer, mais sua aplicação tem que estar preparada para isso
epoch- é um padrão utilixzado para data com referencia ao dia 1/1/1970 ao 0h
metodo add() - diminui ou almenta o elemento (dia mes ou ano)
excecoes - uma ocorrencia anormal gerada no fluxo encadeado em  um sistema
é possivel avancar a execução da depuraçao linha a linha



				###JAVA AVANÇADO###
	## PARADIGMA FUNCIONAL NO JAVA
		# PARADIGMA IMPERATIVO --> É AQUELE QUE EXPRESSA O CÓDIGO ATRAVES DE COMANDOS AO COMPUTADOR, NELE
		 É POSSIVEL TER CONTROLE DE ESTADO DOS OBJETOS.
		# PARADIGMA FUNCIONAL --> DAMOS UMA REGRA, UMA DECLARAÇÃO DE COMO QUEREMOS QUE O PROGRAMA SE COMPORTE
			# COMPOSIÇÃO DE FUNÇÕES  --> É CRIAR UMA NOVA FUNÇÃO ATRAVES DA COMPOSIÇÃO DE OUTRAS. POR EXEMPLO, 
		  	   VAMOS CRIAR UMA FUNÇÃO QUE VAI FILTRAR UM ARRAY, FILTRANDO SOMENTE OS NUMEROS PARES E MULTIPLICANDO
		  	   POR DOIS.
		# FUNÇÕES PURAS --> É CHAMADA DE PURA QUANDO INVOCADA MAIS DE UMA VEZ PRODUZ EXATAMENTE O MESMO RESULTADO
		# IMUTABILIDADE --> SIGNIFICA QUE UMA VEZ QUE UMA VARIAVEL QUE RECEBEU UM VALOR, VAI POSSUIR ESSE VALOR
		  PARA SEMPRE, OU QUANDO CRIAMOS UM OBJETO ELE NÃO PODE SER MODIFICADO.
	## LAMBDA NO JAVA
		# OS LAMBDAS OBEDECEM O CONCEITO DO PARADIGMA FUNCIONAL, COM ELES PODEMOS FACILITAR LEGIBILIDADE DO NOSSO 
		  CÓDIGO, ALÉM DISSO COM A NOVA API FUNCIONAL DO JAVA PODEMOS TER UMA ALTA PRODUTIVIDADE PARA LIDAR COM 
		  OBJETOS.
		# INTERFACE FUNCIONAIS - SÃO INTERFACE QUE POSSUEM APENAS UM METODO ABSTRATO 
 		# SINTAXE BASE DE UMA LAMBDA --> InterfaceFuncional nomeVariavel = parametro -> logica
		# DEVEMOS UTILIZAR CHAVES EM UMA LAMBDA QUANDO O MESMO POSSUIR MAIS DE UMA INSTRUÇÃO
		# ANTES DO JAVA 8 IMPLEMEMENTAÇÃO DE INTERFACE ERA UTILIZADA A ESTRATEGIA DE CLASSE ANONIMA
	## RECURSIVIDADE EM JAVA
		# É A CHAMADA DE VARIAS VEZES O MESMO METODO QUE FOI DECLARADO, DENTRO DO PROPRIO METODO
		# RECURCIVIDADE TEM UM PAPEL IMPORTANTE EM PROGRAMAÇÃO FUNCIONAL, FACILITANDO QUE EVITEMOS ESTADOS MUTÁVEIS E 
		  MATENHAMOS NOSSO PROGRAMA MAIS DECLARATIVO, E MENOS IMPERATIVO.
		# TAIL CALL(RECURSIVIDADE EM CALDA): RECURSÃO EM CAUDA É UMA RECURSÃO ONDE NÃO HÁ NENHUMA LINHA DE CÓDIGO 
		  APÓS CHAMADA DO PRÓPRIO MÉTODO E SENDO ASSIM, NÃO HÁ NENHUM TIPO DE PROCESSAMENTO A SER FEITO APÓS A CHAMADA 
		  RECURSIVIDADE.
			# OBS: A JVM NÃO SUPORTA A RECURSÃO EM CALDA, ELE LANÇA UM ESTOURO DE PILHA (STACKOVERFLOW).
		# MEMORIZATION: É UMA TÉCNICA DE OTIMIZAÇÃO QUE CONSISTE NO CACHE DO RESULTADO DE UMA FUNÇÃO, BASEADO NOS 
		  PARÂMETROS DE ENTRADA. COM ISSO, NAS SEGUINTES EXECUÇÃO CONSEGUIMOS TER UMA RESPOSTA MAIS RÁPIDA.
	## INTERFACE FUNCIONAL
		# FUNÇÃO DE ALTA ORDEM --> É UMA FUNÇÃO QUE RETORNA OU QUE RECEBE UMA FUNÇÃO COMO PARÂMETRO
		
	##PROCESSAMENTO ASSÍNCRONA E PARALELO
		# O QUE SINCRONA E ASSÍNCRONA 
			# THREADS --> É UM PEQUENO PROGRAMA QUE TRABALHA COMO UM SUBSISTEMA, SENDO UM FRMA DE UM PROCESSO 
			  SE AUTODIVIDIR EM DUAS OU MAIS TAREFAS. ESSAS TEREFAS MULTIPLAS PODEM SER EXECUTADAS SIMULTANEAMENTE 
			  PARA RODAR MAIS RÁPIDO DO QUE UM PROGRAMA EM UM UNICO BLOCO OU PRATICAMENTE JUNTAS 
			# PROCESSAMENTO SINCRONO, SÃO TODOS OS PROCESSAMENTO QUE OCORREM EM SEQUENCIA, PÓS PROCESSOS SÃO EXECUTADOS 
			    EM FILA
			# ASSÍNCRONO --> QUANDO DOIS OU MAIS PROCESSOS SÃO REALIZADOS AO MESMO TEMPO. OS PROCESSOS SÃO REALIZADOS
			  SIMULTANEAMENTE SEM QUE UM PROCESSO NECESSITE QUE OUTRO TERMINE PARA SER EXECUTADO.  
	##MODULARIZAÇÃO DO JAVA
		##JIGSAW --> (MINI- VERSÃO)É COMPOSTO POR SÉRIE DE JEPS. ALAGUMAS DELAS INCLUSIVE JÁ DISPONÍVEIS NO JAVA 8, COMO OS 
			    CONHECEMOS COMPACT PROFILES. A IDEIA POR TRAS DO PROJETO NÃO É SÓ CRIAR UM SISTEMA DE MODULOS,
			    QUE PODEREMOS USAR EM NOSSOS PROJETOS, MAS TAMBEM APLICA-LO EM TODA A PLATAFORMA E JDK EM BUSCA
			    DE MELHORAR A ORGANIZAÇÃO E DESEMPENHO. 
			    
			##ORIENTAÇÃO A OBJETO JAVA##

	#DIFERANÇA ENTRE PROGRAMAÇÃO ESTRUTURA E POO
	  #PROGRAMAÇÃO ESTRUTURADA É LINEAR E ESTRURADA COMA O PROPRIO NOME DIZ OU SEJA, AS TOMADAS DE DECISÃO SÃO FEITAS 
	   DE ORDENADA POR MEIO DE VERIFICAÇÕES CONDICIONAIS E INTERÇÕES UTILIZANDO COMO RECURSO VARIAVEIS E ROTINAS PAR A
	   O DESENVOLVIMENTO DOS PROGRAMAS
	  #EXEMPLO 
			##TRABALHANDO COM COLLECTIONS JAVA##
	# COLLECTIONS
		# É UM OBJETO QUE AGRUPA MÚLTIPLOS ELEMENTOS (VARIÁVEIS PRIMITIVA OU OBJETOS) DENTRO DE UMA ÚNICA UNIDADE
		# SERVE PARA ARMAZENAR E PROCESSAR CONJUNTO DE DADOS DE EFICIENTE.
	# COMPOSIÇÃO DAS COLLECTIONS
		# INTERFACE: É UM CONTRATO QUANDO ASSUMIDO POR UMA CLASSE DEVE SER IMPLEMENTADO.
		# IMPLEMENTAÇÃO OU CLASSES: SÃO AS MATERIALIZAÇÃO, A CODIFICAÇÃO DAS INTERFACES.
	# COLEÇÕES COM ITERAÇÕES ORDENADAS: LISTA 
		# PACOTE JAVA UTIL.
		#ELEMENTOS DUPLUCADOS E GARANTE ORDEM DE INSRÇÃO.
		# ARRAYLIST DEVE SER USADO ONDE MAIS OPERAÇÕES DE PESQUISA SÃO NECESSÁRIAS, E 
		# LINKEDLIST DEVE SER USADO ONDE MAIS OPERAÇÕES DE INSERÇÃO E EXCLUSÃO SÃO NECESSÁRIAS;

	# COLEÇÕES SINGULARES : SET
		# JAVA.UTIL.SET
		# CARACTERÍSTICA --> NÃO PERMITE ELEMENTO DUPLICADO
				     NÃO POSSUI ÍNDICE
				     
 	# COLEÇÃO DE PARES: MAP
		# JAVA.UTIL.MAP
		# ELEMENTOS UNICOS (KEY) PARA CADA VALOR (VALUE)
	# RFERENCE METHOD
		# É UM NOVO REECURSO DO JAVA 8 QUE PERMITE FAZER REFERENCIA A UM METODO OU CONSTRUTOR DE UMA CLASSE (DE FORMNA
		  FUNCIONAL E ASSIM INDICAR QUE ELE DEVE SER UTILIZADO EM PONTO ESPECIFICO DO CODIGO, DEIXANDO-O MAIS SIMPLIS
		  E LEGIVEL, BASTA INFORMAR UMA CLASSE OU REFERENCIA SEGUIDA DO SIMBOLO "::"E O NOME DO METODO SEM OS PARENTESES 
		  NO FINAL
	# STREAMS API
		# UMA NOVA OPÇÃO PARA A MANIPULAÇÃO DE COLEÇÕES EM JAVA SEGUINDO OS PRINCIPIOS DE PROGRAMAÇÃO FUNCIONAL
		  COMBINADA COM AS EXPRESSÕES LAMBDA, ELA PROPORCIONA UM FORMA DIFERENTE UMA MANEIRA SIMPLES E CONCISA DE ESCREVER
		  CODIGO QUE SULTA EM FACILIDADE DE MANUTENÇÃO E PARALELIZAÇÃO SEM EFEITO INDESEJADOS EM TEMPO DE EXECÇÃO
	# CLASSE ANONIMA 
		# EM JAVA É UMA CLASSE QUE NÃO RECEBEU UM NOME E É TANTO DECLARADA E INSTANCIADO EM UMA UNICA INSTRUÇÃO.
		  VOCÊ DEVE CONSIDERAR O USO DE UMA CLASSE ANONIMA SEMPRE QUE VOCÊ PRECISAR PARA CRIAR UMA CLASSE QUE SERÁ
		  INSTANCIADO APENAS UM VEZ.
	# FUNCTIONAL INTERFACE
		# QUAQUER INTERFACE COM UM SAM(SINGLE ABSTRACT METHOD) É UMA INTERFACE E SUA IMPLANTAÇÃO PODE SER TRATADA COM
		  EXPRESSÕES LAMBDA.
			# INTERFACES FUNCIONAIS: COMPARATOR; CONSUMER; FUNCTION; PREDICATE.
	# LAMBDA
		# É UMA FUNÇÃO SEM DECLARAÇÃO, ISTO É, NÃO É NECESSARIO COLOCAR UM NOME, UM TIPO DE RETORNO E O MODIFICADOR DE ACESSO.
		  A IDEIA É QUE O METODO SEJA DECLARADO NO MESMO LUGAR EM QUE SERA USADO. AS FUNÇÕES LAMBDA EM JAVA TEM SINTAXE DEFINIDA 
		  (ARGUMENTO)->(CORPO).
















		aceleração 
	#playwright.dev 
		site: xpath.com
		robotframeork